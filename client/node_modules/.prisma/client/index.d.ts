
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model User
 * 
 */
export type User = {
  userID: number
  username: string | null
  password: string | null
}

/**
 * Model Stockwerke
 * 
 */
export type Stockwerke = {
  stockwerkID: number
  stockwerkNr: number | null
  stockwerkName: string | null
}

/**
 * Model Sitzungszimmer
 * 
 */
export type Sitzungszimmer = {
  sitzungszimmerID: number
  anzPersonen: number
  sitzungszimmerStID: number
}

/**
 * Model Standorte
 * 
 */
export type Standorte = {
  standortID: number
  standortName: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.stockwerke`: Exposes CRUD operations for the **Stockwerke** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Stockwerkes
    * const stockwerkes = await prisma.stockwerke.findMany()
    * ```
    */
  get stockwerke(): Prisma.StockwerkeDelegate<GlobalReject>;

  /**
   * `prisma.sitzungszimmer`: Exposes CRUD operations for the **Sitzungszimmer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sitzungszimmers
    * const sitzungszimmers = await prisma.sitzungszimmer.findMany()
    * ```
    */
  get sitzungszimmer(): Prisma.SitzungszimmerDelegate<GlobalReject>;

  /**
   * `prisma.standorte`: Exposes CRUD operations for the **Standorte** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Standortes
    * const standortes = await prisma.standorte.findMany()
    * ```
    */
  get standorte(): Prisma.StandorteDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 3.9.1
   * Query Engine version: bcc2ff906db47790ee902e7bbc76d7ffb1893009
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    User: 'User',
    Stockwerke: 'Stockwerke',
    Sitzungszimmer: 'Sitzungszimmer',
    Standorte: 'Standorte'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type StandorteCountOutputType
   */


  export type StandorteCountOutputType = {
    sitzungsZimmer: number
  }

  export type StandorteCountOutputTypeSelect = {
    sitzungsZimmer?: boolean
  }

  export type StandorteCountOutputTypeGetPayload<
    S extends boolean | null | undefined | StandorteCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? StandorteCountOutputType
    : S extends undefined
    ? never
    : S extends StandorteCountOutputTypeArgs
    ?'include' extends U
    ? StandorteCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof StandorteCountOutputType ?StandorteCountOutputType [P]
  : 
     never
  } 
    : StandorteCountOutputType
  : StandorteCountOutputType




  // Custom InputTypes

  /**
   * StandorteCountOutputType without action
   */
  export type StandorteCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the StandorteCountOutputType
     * 
    **/
    select?: StandorteCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    userID: number | null
  }

  export type UserSumAggregateOutputType = {
    userID: number | null
  }

  export type UserMinAggregateOutputType = {
    userID: number | null
    username: string | null
    password: string | null
  }

  export type UserMaxAggregateOutputType = {
    userID: number | null
    username: string | null
    password: string | null
  }

  export type UserCountAggregateOutputType = {
    userID: number
    username: number
    password: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    userID?: true
  }

  export type UserSumAggregateInputType = {
    userID?: true
  }

  export type UserMinAggregateInputType = {
    userID?: true
    username?: true
    password?: true
  }

  export type UserMaxAggregateInputType = {
    userID?: true
    username?: true
    password?: true
  }

  export type UserCountAggregateInputType = {
    userID?: true
    username?: true
    password?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    userID: number
    username: string | null
    password: string | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Promise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    userID?: boolean
    username?: boolean
    password?: boolean
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof User ?User [P]
  : 
     never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `userID`
     * const userWithUserIDOnly = await prisma.user.findMany({ select: { userID: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     * 
    **/
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     * 
    **/
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
  }



  /**
   * Model Stockwerke
   */


  export type AggregateStockwerke = {
    _count: StockwerkeCountAggregateOutputType | null
    _avg: StockwerkeAvgAggregateOutputType | null
    _sum: StockwerkeSumAggregateOutputType | null
    _min: StockwerkeMinAggregateOutputType | null
    _max: StockwerkeMaxAggregateOutputType | null
  }

  export type StockwerkeAvgAggregateOutputType = {
    stockwerkID: number | null
    stockwerkNr: number | null
  }

  export type StockwerkeSumAggregateOutputType = {
    stockwerkID: number | null
    stockwerkNr: number | null
  }

  export type StockwerkeMinAggregateOutputType = {
    stockwerkID: number | null
    stockwerkNr: number | null
    stockwerkName: string | null
  }

  export type StockwerkeMaxAggregateOutputType = {
    stockwerkID: number | null
    stockwerkNr: number | null
    stockwerkName: string | null
  }

  export type StockwerkeCountAggregateOutputType = {
    stockwerkID: number
    stockwerkNr: number
    stockwerkName: number
    _all: number
  }


  export type StockwerkeAvgAggregateInputType = {
    stockwerkID?: true
    stockwerkNr?: true
  }

  export type StockwerkeSumAggregateInputType = {
    stockwerkID?: true
    stockwerkNr?: true
  }

  export type StockwerkeMinAggregateInputType = {
    stockwerkID?: true
    stockwerkNr?: true
    stockwerkName?: true
  }

  export type StockwerkeMaxAggregateInputType = {
    stockwerkID?: true
    stockwerkNr?: true
    stockwerkName?: true
  }

  export type StockwerkeCountAggregateInputType = {
    stockwerkID?: true
    stockwerkNr?: true
    stockwerkName?: true
    _all?: true
  }

  export type StockwerkeAggregateArgs = {
    /**
     * Filter which Stockwerke to aggregate.
     * 
    **/
    where?: StockwerkeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stockwerkes to fetch.
     * 
    **/
    orderBy?: Enumerable<StockwerkeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: StockwerkeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stockwerkes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stockwerkes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Stockwerkes
    **/
    _count?: true | StockwerkeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StockwerkeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StockwerkeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StockwerkeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StockwerkeMaxAggregateInputType
  }

  export type GetStockwerkeAggregateType<T extends StockwerkeAggregateArgs> = {
        [P in keyof T & keyof AggregateStockwerke]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStockwerke[P]>
      : GetScalarType<T[P], AggregateStockwerke[P]>
  }




  export type StockwerkeGroupByArgs = {
    where?: StockwerkeWhereInput
    orderBy?: Enumerable<StockwerkeOrderByWithAggregationInput>
    by: Array<StockwerkeScalarFieldEnum>
    having?: StockwerkeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StockwerkeCountAggregateInputType | true
    _avg?: StockwerkeAvgAggregateInputType
    _sum?: StockwerkeSumAggregateInputType
    _min?: StockwerkeMinAggregateInputType
    _max?: StockwerkeMaxAggregateInputType
  }


  export type StockwerkeGroupByOutputType = {
    stockwerkID: number
    stockwerkNr: number | null
    stockwerkName: string | null
    _count: StockwerkeCountAggregateOutputType | null
    _avg: StockwerkeAvgAggregateOutputType | null
    _sum: StockwerkeSumAggregateOutputType | null
    _min: StockwerkeMinAggregateOutputType | null
    _max: StockwerkeMaxAggregateOutputType | null
  }

  type GetStockwerkeGroupByPayload<T extends StockwerkeGroupByArgs> = Promise<
    Array<
      PickArray<StockwerkeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StockwerkeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StockwerkeGroupByOutputType[P]>
            : GetScalarType<T[P], StockwerkeGroupByOutputType[P]>
        }
      >
    >


  export type StockwerkeSelect = {
    stockwerkID?: boolean
    stockwerkNr?: boolean
    stockwerkName?: boolean
  }

  export type StockwerkeGetPayload<
    S extends boolean | null | undefined | StockwerkeArgs,
    U = keyof S
      > = S extends true
        ? Stockwerke
    : S extends undefined
    ? never
    : S extends StockwerkeArgs | StockwerkeFindManyArgs
    ?'include' extends U
    ? Stockwerke 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Stockwerke ?Stockwerke [P]
  : 
     never
  } 
    : Stockwerke
  : Stockwerke


  type StockwerkeCountArgs = Merge<
    Omit<StockwerkeFindManyArgs, 'select' | 'include'> & {
      select?: StockwerkeCountAggregateInputType | true
    }
  >

  export interface StockwerkeDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Stockwerke that matches the filter.
     * @param {StockwerkeFindUniqueArgs} args - Arguments to find a Stockwerke
     * @example
     * // Get one Stockwerke
     * const stockwerke = await prisma.stockwerke.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StockwerkeFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, StockwerkeFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Stockwerke'> extends True ? CheckSelect<T, Prisma__StockwerkeClient<Stockwerke>, Prisma__StockwerkeClient<StockwerkeGetPayload<T>>> : CheckSelect<T, Prisma__StockwerkeClient<Stockwerke | null >, Prisma__StockwerkeClient<StockwerkeGetPayload<T> | null >>

    /**
     * Find the first Stockwerke that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockwerkeFindFirstArgs} args - Arguments to find a Stockwerke
     * @example
     * // Get one Stockwerke
     * const stockwerke = await prisma.stockwerke.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StockwerkeFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, StockwerkeFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Stockwerke'> extends True ? CheckSelect<T, Prisma__StockwerkeClient<Stockwerke>, Prisma__StockwerkeClient<StockwerkeGetPayload<T>>> : CheckSelect<T, Prisma__StockwerkeClient<Stockwerke | null >, Prisma__StockwerkeClient<StockwerkeGetPayload<T> | null >>

    /**
     * Find zero or more Stockwerkes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockwerkeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Stockwerkes
     * const stockwerkes = await prisma.stockwerke.findMany()
     * 
     * // Get first 10 Stockwerkes
     * const stockwerkes = await prisma.stockwerke.findMany({ take: 10 })
     * 
     * // Only select the `stockwerkID`
     * const stockwerkeWithStockwerkIDOnly = await prisma.stockwerke.findMany({ select: { stockwerkID: true } })
     * 
    **/
    findMany<T extends StockwerkeFindManyArgs>(
      args?: SelectSubset<T, StockwerkeFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Stockwerke>>, PrismaPromise<Array<StockwerkeGetPayload<T>>>>

    /**
     * Create a Stockwerke.
     * @param {StockwerkeCreateArgs} args - Arguments to create a Stockwerke.
     * @example
     * // Create one Stockwerke
     * const Stockwerke = await prisma.stockwerke.create({
     *   data: {
     *     // ... data to create a Stockwerke
     *   }
     * })
     * 
    **/
    create<T extends StockwerkeCreateArgs>(
      args: SelectSubset<T, StockwerkeCreateArgs>
    ): CheckSelect<T, Prisma__StockwerkeClient<Stockwerke>, Prisma__StockwerkeClient<StockwerkeGetPayload<T>>>

    /**
     * Create many Stockwerkes.
     *     @param {StockwerkeCreateManyArgs} args - Arguments to create many Stockwerkes.
     *     @example
     *     // Create many Stockwerkes
     *     const stockwerke = await prisma.stockwerke.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends StockwerkeCreateManyArgs>(
      args?: SelectSubset<T, StockwerkeCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Stockwerke.
     * @param {StockwerkeDeleteArgs} args - Arguments to delete one Stockwerke.
     * @example
     * // Delete one Stockwerke
     * const Stockwerke = await prisma.stockwerke.delete({
     *   where: {
     *     // ... filter to delete one Stockwerke
     *   }
     * })
     * 
    **/
    delete<T extends StockwerkeDeleteArgs>(
      args: SelectSubset<T, StockwerkeDeleteArgs>
    ): CheckSelect<T, Prisma__StockwerkeClient<Stockwerke>, Prisma__StockwerkeClient<StockwerkeGetPayload<T>>>

    /**
     * Update one Stockwerke.
     * @param {StockwerkeUpdateArgs} args - Arguments to update one Stockwerke.
     * @example
     * // Update one Stockwerke
     * const stockwerke = await prisma.stockwerke.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StockwerkeUpdateArgs>(
      args: SelectSubset<T, StockwerkeUpdateArgs>
    ): CheckSelect<T, Prisma__StockwerkeClient<Stockwerke>, Prisma__StockwerkeClient<StockwerkeGetPayload<T>>>

    /**
     * Delete zero or more Stockwerkes.
     * @param {StockwerkeDeleteManyArgs} args - Arguments to filter Stockwerkes to delete.
     * @example
     * // Delete a few Stockwerkes
     * const { count } = await prisma.stockwerke.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StockwerkeDeleteManyArgs>(
      args?: SelectSubset<T, StockwerkeDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stockwerkes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockwerkeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Stockwerkes
     * const stockwerke = await prisma.stockwerke.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StockwerkeUpdateManyArgs>(
      args: SelectSubset<T, StockwerkeUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Stockwerke.
     * @param {StockwerkeUpsertArgs} args - Arguments to update or create a Stockwerke.
     * @example
     * // Update or create a Stockwerke
     * const stockwerke = await prisma.stockwerke.upsert({
     *   create: {
     *     // ... data to create a Stockwerke
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Stockwerke we want to update
     *   }
     * })
    **/
    upsert<T extends StockwerkeUpsertArgs>(
      args: SelectSubset<T, StockwerkeUpsertArgs>
    ): CheckSelect<T, Prisma__StockwerkeClient<Stockwerke>, Prisma__StockwerkeClient<StockwerkeGetPayload<T>>>

    /**
     * Count the number of Stockwerkes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockwerkeCountArgs} args - Arguments to filter Stockwerkes to count.
     * @example
     * // Count the number of Stockwerkes
     * const count = await prisma.stockwerke.count({
     *   where: {
     *     // ... the filter for the Stockwerkes we want to count
     *   }
     * })
    **/
    count<T extends StockwerkeCountArgs>(
      args?: Subset<T, StockwerkeCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StockwerkeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Stockwerke.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockwerkeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StockwerkeAggregateArgs>(args: Subset<T, StockwerkeAggregateArgs>): PrismaPromise<GetStockwerkeAggregateType<T>>

    /**
     * Group by Stockwerke.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockwerkeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StockwerkeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StockwerkeGroupByArgs['orderBy'] }
        : { orderBy?: StockwerkeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StockwerkeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStockwerkeGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Stockwerke.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__StockwerkeClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Stockwerke findUnique
   */
  export type StockwerkeFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Stockwerke
     * 
    **/
    select?: StockwerkeSelect | null
    /**
     * Throw an Error if a Stockwerke can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Stockwerke to fetch.
     * 
    **/
    where: StockwerkeWhereUniqueInput
  }


  /**
   * Stockwerke findFirst
   */
  export type StockwerkeFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Stockwerke
     * 
    **/
    select?: StockwerkeSelect | null
    /**
     * Throw an Error if a Stockwerke can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Stockwerke to fetch.
     * 
    **/
    where?: StockwerkeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stockwerkes to fetch.
     * 
    **/
    orderBy?: Enumerable<StockwerkeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stockwerkes.
     * 
    **/
    cursor?: StockwerkeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stockwerkes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stockwerkes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stockwerkes.
     * 
    **/
    distinct?: Enumerable<StockwerkeScalarFieldEnum>
  }


  /**
   * Stockwerke findMany
   */
  export type StockwerkeFindManyArgs = {
    /**
     * Select specific fields to fetch from the Stockwerke
     * 
    **/
    select?: StockwerkeSelect | null
    /**
     * Filter, which Stockwerkes to fetch.
     * 
    **/
    where?: StockwerkeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stockwerkes to fetch.
     * 
    **/
    orderBy?: Enumerable<StockwerkeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Stockwerkes.
     * 
    **/
    cursor?: StockwerkeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stockwerkes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stockwerkes.
     * 
    **/
    skip?: number
    distinct?: Enumerable<StockwerkeScalarFieldEnum>
  }


  /**
   * Stockwerke create
   */
  export type StockwerkeCreateArgs = {
    /**
     * Select specific fields to fetch from the Stockwerke
     * 
    **/
    select?: StockwerkeSelect | null
    /**
     * The data needed to create a Stockwerke.
     * 
    **/
    data: XOR<StockwerkeCreateInput, StockwerkeUncheckedCreateInput>
  }


  /**
   * Stockwerke createMany
   */
  export type StockwerkeCreateManyArgs = {
    /**
     * The data used to create many Stockwerkes.
     * 
    **/
    data: Enumerable<StockwerkeCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Stockwerke update
   */
  export type StockwerkeUpdateArgs = {
    /**
     * Select specific fields to fetch from the Stockwerke
     * 
    **/
    select?: StockwerkeSelect | null
    /**
     * The data needed to update a Stockwerke.
     * 
    **/
    data: XOR<StockwerkeUpdateInput, StockwerkeUncheckedUpdateInput>
    /**
     * Choose, which Stockwerke to update.
     * 
    **/
    where: StockwerkeWhereUniqueInput
  }


  /**
   * Stockwerke updateMany
   */
  export type StockwerkeUpdateManyArgs = {
    /**
     * The data used to update Stockwerkes.
     * 
    **/
    data: XOR<StockwerkeUpdateManyMutationInput, StockwerkeUncheckedUpdateManyInput>
    /**
     * Filter which Stockwerkes to update
     * 
    **/
    where?: StockwerkeWhereInput
  }


  /**
   * Stockwerke upsert
   */
  export type StockwerkeUpsertArgs = {
    /**
     * Select specific fields to fetch from the Stockwerke
     * 
    **/
    select?: StockwerkeSelect | null
    /**
     * The filter to search for the Stockwerke to update in case it exists.
     * 
    **/
    where: StockwerkeWhereUniqueInput
    /**
     * In case the Stockwerke found by the `where` argument doesn't exist, create a new Stockwerke with this data.
     * 
    **/
    create: XOR<StockwerkeCreateInput, StockwerkeUncheckedCreateInput>
    /**
     * In case the Stockwerke was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<StockwerkeUpdateInput, StockwerkeUncheckedUpdateInput>
  }


  /**
   * Stockwerke delete
   */
  export type StockwerkeDeleteArgs = {
    /**
     * Select specific fields to fetch from the Stockwerke
     * 
    **/
    select?: StockwerkeSelect | null
    /**
     * Filter which Stockwerke to delete.
     * 
    **/
    where: StockwerkeWhereUniqueInput
  }


  /**
   * Stockwerke deleteMany
   */
  export type StockwerkeDeleteManyArgs = {
    /**
     * Filter which Stockwerkes to delete
     * 
    **/
    where?: StockwerkeWhereInput
  }


  /**
   * Stockwerke without action
   */
  export type StockwerkeArgs = {
    /**
     * Select specific fields to fetch from the Stockwerke
     * 
    **/
    select?: StockwerkeSelect | null
  }



  /**
   * Model Sitzungszimmer
   */


  export type AggregateSitzungszimmer = {
    _count: SitzungszimmerCountAggregateOutputType | null
    _avg: SitzungszimmerAvgAggregateOutputType | null
    _sum: SitzungszimmerSumAggregateOutputType | null
    _min: SitzungszimmerMinAggregateOutputType | null
    _max: SitzungszimmerMaxAggregateOutputType | null
  }

  export type SitzungszimmerAvgAggregateOutputType = {
    sitzungszimmerID: number | null
    anzPersonen: number | null
    sitzungszimmerStID: number | null
  }

  export type SitzungszimmerSumAggregateOutputType = {
    sitzungszimmerID: number | null
    anzPersonen: number | null
    sitzungszimmerStID: number | null
  }

  export type SitzungszimmerMinAggregateOutputType = {
    sitzungszimmerID: number | null
    anzPersonen: number | null
    sitzungszimmerStID: number | null
  }

  export type SitzungszimmerMaxAggregateOutputType = {
    sitzungszimmerID: number | null
    anzPersonen: number | null
    sitzungszimmerStID: number | null
  }

  export type SitzungszimmerCountAggregateOutputType = {
    sitzungszimmerID: number
    anzPersonen: number
    sitzungszimmerStID: number
    _all: number
  }


  export type SitzungszimmerAvgAggregateInputType = {
    sitzungszimmerID?: true
    anzPersonen?: true
    sitzungszimmerStID?: true
  }

  export type SitzungszimmerSumAggregateInputType = {
    sitzungszimmerID?: true
    anzPersonen?: true
    sitzungszimmerStID?: true
  }

  export type SitzungszimmerMinAggregateInputType = {
    sitzungszimmerID?: true
    anzPersonen?: true
    sitzungszimmerStID?: true
  }

  export type SitzungszimmerMaxAggregateInputType = {
    sitzungszimmerID?: true
    anzPersonen?: true
    sitzungszimmerStID?: true
  }

  export type SitzungszimmerCountAggregateInputType = {
    sitzungszimmerID?: true
    anzPersonen?: true
    sitzungszimmerStID?: true
    _all?: true
  }

  export type SitzungszimmerAggregateArgs = {
    /**
     * Filter which Sitzungszimmer to aggregate.
     * 
    **/
    where?: SitzungszimmerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sitzungszimmers to fetch.
     * 
    **/
    orderBy?: Enumerable<SitzungszimmerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: SitzungszimmerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sitzungszimmers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sitzungszimmers.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sitzungszimmers
    **/
    _count?: true | SitzungszimmerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SitzungszimmerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SitzungszimmerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SitzungszimmerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SitzungszimmerMaxAggregateInputType
  }

  export type GetSitzungszimmerAggregateType<T extends SitzungszimmerAggregateArgs> = {
        [P in keyof T & keyof AggregateSitzungszimmer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSitzungszimmer[P]>
      : GetScalarType<T[P], AggregateSitzungszimmer[P]>
  }




  export type SitzungszimmerGroupByArgs = {
    where?: SitzungszimmerWhereInput
    orderBy?: Enumerable<SitzungszimmerOrderByWithAggregationInput>
    by: Array<SitzungszimmerScalarFieldEnum>
    having?: SitzungszimmerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SitzungszimmerCountAggregateInputType | true
    _avg?: SitzungszimmerAvgAggregateInputType
    _sum?: SitzungszimmerSumAggregateInputType
    _min?: SitzungszimmerMinAggregateInputType
    _max?: SitzungszimmerMaxAggregateInputType
  }


  export type SitzungszimmerGroupByOutputType = {
    sitzungszimmerID: number
    anzPersonen: number
    sitzungszimmerStID: number
    _count: SitzungszimmerCountAggregateOutputType | null
    _avg: SitzungszimmerAvgAggregateOutputType | null
    _sum: SitzungszimmerSumAggregateOutputType | null
    _min: SitzungszimmerMinAggregateOutputType | null
    _max: SitzungszimmerMaxAggregateOutputType | null
  }

  type GetSitzungszimmerGroupByPayload<T extends SitzungszimmerGroupByArgs> = Promise<
    Array<
      PickArray<SitzungszimmerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SitzungszimmerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SitzungszimmerGroupByOutputType[P]>
            : GetScalarType<T[P], SitzungszimmerGroupByOutputType[P]>
        }
      >
    >


  export type SitzungszimmerSelect = {
    sitzungszimmerID?: boolean
    anzPersonen?: boolean
    sitzungsZimmerStandort?: boolean | StandorteArgs
    sitzungszimmerStID?: boolean
  }

  export type SitzungszimmerInclude = {
    sitzungsZimmerStandort?: boolean | StandorteArgs
  }

  export type SitzungszimmerGetPayload<
    S extends boolean | null | undefined | SitzungszimmerArgs,
    U = keyof S
      > = S extends true
        ? Sitzungszimmer
    : S extends undefined
    ? never
    : S extends SitzungszimmerArgs | SitzungszimmerFindManyArgs
    ?'include' extends U
    ? Sitzungszimmer  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'sitzungsZimmerStandort'
        ? StandorteGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Sitzungszimmer ?Sitzungszimmer [P]
  : 
          P extends 'sitzungsZimmerStandort'
        ? StandorteGetPayload<S['select'][P]> : never
  } 
    : Sitzungszimmer
  : Sitzungszimmer


  type SitzungszimmerCountArgs = Merge<
    Omit<SitzungszimmerFindManyArgs, 'select' | 'include'> & {
      select?: SitzungszimmerCountAggregateInputType | true
    }
  >

  export interface SitzungszimmerDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Sitzungszimmer that matches the filter.
     * @param {SitzungszimmerFindUniqueArgs} args - Arguments to find a Sitzungszimmer
     * @example
     * // Get one Sitzungszimmer
     * const sitzungszimmer = await prisma.sitzungszimmer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SitzungszimmerFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SitzungszimmerFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Sitzungszimmer'> extends True ? CheckSelect<T, Prisma__SitzungszimmerClient<Sitzungszimmer>, Prisma__SitzungszimmerClient<SitzungszimmerGetPayload<T>>> : CheckSelect<T, Prisma__SitzungszimmerClient<Sitzungszimmer | null >, Prisma__SitzungszimmerClient<SitzungszimmerGetPayload<T> | null >>

    /**
     * Find the first Sitzungszimmer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SitzungszimmerFindFirstArgs} args - Arguments to find a Sitzungszimmer
     * @example
     * // Get one Sitzungszimmer
     * const sitzungszimmer = await prisma.sitzungszimmer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SitzungszimmerFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SitzungszimmerFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Sitzungszimmer'> extends True ? CheckSelect<T, Prisma__SitzungszimmerClient<Sitzungszimmer>, Prisma__SitzungszimmerClient<SitzungszimmerGetPayload<T>>> : CheckSelect<T, Prisma__SitzungszimmerClient<Sitzungszimmer | null >, Prisma__SitzungszimmerClient<SitzungszimmerGetPayload<T> | null >>

    /**
     * Find zero or more Sitzungszimmers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SitzungszimmerFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sitzungszimmers
     * const sitzungszimmers = await prisma.sitzungszimmer.findMany()
     * 
     * // Get first 10 Sitzungszimmers
     * const sitzungszimmers = await prisma.sitzungszimmer.findMany({ take: 10 })
     * 
     * // Only select the `sitzungszimmerID`
     * const sitzungszimmerWithSitzungszimmerIDOnly = await prisma.sitzungszimmer.findMany({ select: { sitzungszimmerID: true } })
     * 
    **/
    findMany<T extends SitzungszimmerFindManyArgs>(
      args?: SelectSubset<T, SitzungszimmerFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Sitzungszimmer>>, PrismaPromise<Array<SitzungszimmerGetPayload<T>>>>

    /**
     * Create a Sitzungszimmer.
     * @param {SitzungszimmerCreateArgs} args - Arguments to create a Sitzungszimmer.
     * @example
     * // Create one Sitzungszimmer
     * const Sitzungszimmer = await prisma.sitzungszimmer.create({
     *   data: {
     *     // ... data to create a Sitzungszimmer
     *   }
     * })
     * 
    **/
    create<T extends SitzungszimmerCreateArgs>(
      args: SelectSubset<T, SitzungszimmerCreateArgs>
    ): CheckSelect<T, Prisma__SitzungszimmerClient<Sitzungszimmer>, Prisma__SitzungszimmerClient<SitzungszimmerGetPayload<T>>>

    /**
     * Create many Sitzungszimmers.
     *     @param {SitzungszimmerCreateManyArgs} args - Arguments to create many Sitzungszimmers.
     *     @example
     *     // Create many Sitzungszimmers
     *     const sitzungszimmer = await prisma.sitzungszimmer.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SitzungszimmerCreateManyArgs>(
      args?: SelectSubset<T, SitzungszimmerCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Sitzungszimmer.
     * @param {SitzungszimmerDeleteArgs} args - Arguments to delete one Sitzungszimmer.
     * @example
     * // Delete one Sitzungszimmer
     * const Sitzungszimmer = await prisma.sitzungszimmer.delete({
     *   where: {
     *     // ... filter to delete one Sitzungszimmer
     *   }
     * })
     * 
    **/
    delete<T extends SitzungszimmerDeleteArgs>(
      args: SelectSubset<T, SitzungszimmerDeleteArgs>
    ): CheckSelect<T, Prisma__SitzungszimmerClient<Sitzungszimmer>, Prisma__SitzungszimmerClient<SitzungszimmerGetPayload<T>>>

    /**
     * Update one Sitzungszimmer.
     * @param {SitzungszimmerUpdateArgs} args - Arguments to update one Sitzungszimmer.
     * @example
     * // Update one Sitzungszimmer
     * const sitzungszimmer = await prisma.sitzungszimmer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SitzungszimmerUpdateArgs>(
      args: SelectSubset<T, SitzungszimmerUpdateArgs>
    ): CheckSelect<T, Prisma__SitzungszimmerClient<Sitzungszimmer>, Prisma__SitzungszimmerClient<SitzungszimmerGetPayload<T>>>

    /**
     * Delete zero or more Sitzungszimmers.
     * @param {SitzungszimmerDeleteManyArgs} args - Arguments to filter Sitzungszimmers to delete.
     * @example
     * // Delete a few Sitzungszimmers
     * const { count } = await prisma.sitzungszimmer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SitzungszimmerDeleteManyArgs>(
      args?: SelectSubset<T, SitzungszimmerDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sitzungszimmers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SitzungszimmerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sitzungszimmers
     * const sitzungszimmer = await prisma.sitzungszimmer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SitzungszimmerUpdateManyArgs>(
      args: SelectSubset<T, SitzungszimmerUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Sitzungszimmer.
     * @param {SitzungszimmerUpsertArgs} args - Arguments to update or create a Sitzungszimmer.
     * @example
     * // Update or create a Sitzungszimmer
     * const sitzungszimmer = await prisma.sitzungszimmer.upsert({
     *   create: {
     *     // ... data to create a Sitzungszimmer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sitzungszimmer we want to update
     *   }
     * })
    **/
    upsert<T extends SitzungszimmerUpsertArgs>(
      args: SelectSubset<T, SitzungszimmerUpsertArgs>
    ): CheckSelect<T, Prisma__SitzungszimmerClient<Sitzungszimmer>, Prisma__SitzungszimmerClient<SitzungszimmerGetPayload<T>>>

    /**
     * Count the number of Sitzungszimmers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SitzungszimmerCountArgs} args - Arguments to filter Sitzungszimmers to count.
     * @example
     * // Count the number of Sitzungszimmers
     * const count = await prisma.sitzungszimmer.count({
     *   where: {
     *     // ... the filter for the Sitzungszimmers we want to count
     *   }
     * })
    **/
    count<T extends SitzungszimmerCountArgs>(
      args?: Subset<T, SitzungszimmerCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SitzungszimmerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sitzungszimmer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SitzungszimmerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SitzungszimmerAggregateArgs>(args: Subset<T, SitzungszimmerAggregateArgs>): PrismaPromise<GetSitzungszimmerAggregateType<T>>

    /**
     * Group by Sitzungszimmer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SitzungszimmerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SitzungszimmerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SitzungszimmerGroupByArgs['orderBy'] }
        : { orderBy?: SitzungszimmerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SitzungszimmerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSitzungszimmerGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Sitzungszimmer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SitzungszimmerClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    sitzungsZimmerStandort<T extends StandorteArgs = {}>(args?: Subset<T, StandorteArgs>): CheckSelect<T, Prisma__StandorteClient<Standorte | null >, Prisma__StandorteClient<StandorteGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Sitzungszimmer findUnique
   */
  export type SitzungszimmerFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Sitzungszimmer
     * 
    **/
    select?: SitzungszimmerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SitzungszimmerInclude | null
    /**
     * Throw an Error if a Sitzungszimmer can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Sitzungszimmer to fetch.
     * 
    **/
    where: SitzungszimmerWhereUniqueInput
  }


  /**
   * Sitzungszimmer findFirst
   */
  export type SitzungszimmerFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Sitzungszimmer
     * 
    **/
    select?: SitzungszimmerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SitzungszimmerInclude | null
    /**
     * Throw an Error if a Sitzungszimmer can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Sitzungszimmer to fetch.
     * 
    **/
    where?: SitzungszimmerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sitzungszimmers to fetch.
     * 
    **/
    orderBy?: Enumerable<SitzungszimmerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sitzungszimmers.
     * 
    **/
    cursor?: SitzungszimmerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sitzungszimmers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sitzungszimmers.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sitzungszimmers.
     * 
    **/
    distinct?: Enumerable<SitzungszimmerScalarFieldEnum>
  }


  /**
   * Sitzungszimmer findMany
   */
  export type SitzungszimmerFindManyArgs = {
    /**
     * Select specific fields to fetch from the Sitzungszimmer
     * 
    **/
    select?: SitzungszimmerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SitzungszimmerInclude | null
    /**
     * Filter, which Sitzungszimmers to fetch.
     * 
    **/
    where?: SitzungszimmerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sitzungszimmers to fetch.
     * 
    **/
    orderBy?: Enumerable<SitzungszimmerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sitzungszimmers.
     * 
    **/
    cursor?: SitzungszimmerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sitzungszimmers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sitzungszimmers.
     * 
    **/
    skip?: number
    distinct?: Enumerable<SitzungszimmerScalarFieldEnum>
  }


  /**
   * Sitzungszimmer create
   */
  export type SitzungszimmerCreateArgs = {
    /**
     * Select specific fields to fetch from the Sitzungszimmer
     * 
    **/
    select?: SitzungszimmerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SitzungszimmerInclude | null
    /**
     * The data needed to create a Sitzungszimmer.
     * 
    **/
    data: XOR<SitzungszimmerCreateInput, SitzungszimmerUncheckedCreateInput>
  }


  /**
   * Sitzungszimmer createMany
   */
  export type SitzungszimmerCreateManyArgs = {
    /**
     * The data used to create many Sitzungszimmers.
     * 
    **/
    data: Enumerable<SitzungszimmerCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Sitzungszimmer update
   */
  export type SitzungszimmerUpdateArgs = {
    /**
     * Select specific fields to fetch from the Sitzungszimmer
     * 
    **/
    select?: SitzungszimmerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SitzungszimmerInclude | null
    /**
     * The data needed to update a Sitzungszimmer.
     * 
    **/
    data: XOR<SitzungszimmerUpdateInput, SitzungszimmerUncheckedUpdateInput>
    /**
     * Choose, which Sitzungszimmer to update.
     * 
    **/
    where: SitzungszimmerWhereUniqueInput
  }


  /**
   * Sitzungszimmer updateMany
   */
  export type SitzungszimmerUpdateManyArgs = {
    /**
     * The data used to update Sitzungszimmers.
     * 
    **/
    data: XOR<SitzungszimmerUpdateManyMutationInput, SitzungszimmerUncheckedUpdateManyInput>
    /**
     * Filter which Sitzungszimmers to update
     * 
    **/
    where?: SitzungszimmerWhereInput
  }


  /**
   * Sitzungszimmer upsert
   */
  export type SitzungszimmerUpsertArgs = {
    /**
     * Select specific fields to fetch from the Sitzungszimmer
     * 
    **/
    select?: SitzungszimmerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SitzungszimmerInclude | null
    /**
     * The filter to search for the Sitzungszimmer to update in case it exists.
     * 
    **/
    where: SitzungszimmerWhereUniqueInput
    /**
     * In case the Sitzungszimmer found by the `where` argument doesn't exist, create a new Sitzungszimmer with this data.
     * 
    **/
    create: XOR<SitzungszimmerCreateInput, SitzungszimmerUncheckedCreateInput>
    /**
     * In case the Sitzungszimmer was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<SitzungszimmerUpdateInput, SitzungszimmerUncheckedUpdateInput>
  }


  /**
   * Sitzungszimmer delete
   */
  export type SitzungszimmerDeleteArgs = {
    /**
     * Select specific fields to fetch from the Sitzungszimmer
     * 
    **/
    select?: SitzungszimmerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SitzungszimmerInclude | null
    /**
     * Filter which Sitzungszimmer to delete.
     * 
    **/
    where: SitzungszimmerWhereUniqueInput
  }


  /**
   * Sitzungszimmer deleteMany
   */
  export type SitzungszimmerDeleteManyArgs = {
    /**
     * Filter which Sitzungszimmers to delete
     * 
    **/
    where?: SitzungszimmerWhereInput
  }


  /**
   * Sitzungszimmer without action
   */
  export type SitzungszimmerArgs = {
    /**
     * Select specific fields to fetch from the Sitzungszimmer
     * 
    **/
    select?: SitzungszimmerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SitzungszimmerInclude | null
  }



  /**
   * Model Standorte
   */


  export type AggregateStandorte = {
    _count: StandorteCountAggregateOutputType | null
    _avg: StandorteAvgAggregateOutputType | null
    _sum: StandorteSumAggregateOutputType | null
    _min: StandorteMinAggregateOutputType | null
    _max: StandorteMaxAggregateOutputType | null
  }

  export type StandorteAvgAggregateOutputType = {
    standortID: number | null
  }

  export type StandorteSumAggregateOutputType = {
    standortID: number | null
  }

  export type StandorteMinAggregateOutputType = {
    standortID: number | null
    standortName: string | null
  }

  export type StandorteMaxAggregateOutputType = {
    standortID: number | null
    standortName: string | null
  }

  export type StandorteCountAggregateOutputType = {
    standortID: number
    standortName: number
    _all: number
  }


  export type StandorteAvgAggregateInputType = {
    standortID?: true
  }

  export type StandorteSumAggregateInputType = {
    standortID?: true
  }

  export type StandorteMinAggregateInputType = {
    standortID?: true
    standortName?: true
  }

  export type StandorteMaxAggregateInputType = {
    standortID?: true
    standortName?: true
  }

  export type StandorteCountAggregateInputType = {
    standortID?: true
    standortName?: true
    _all?: true
  }

  export type StandorteAggregateArgs = {
    /**
     * Filter which Standorte to aggregate.
     * 
    **/
    where?: StandorteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Standortes to fetch.
     * 
    **/
    orderBy?: Enumerable<StandorteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: StandorteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Standortes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Standortes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Standortes
    **/
    _count?: true | StandorteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StandorteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StandorteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StandorteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StandorteMaxAggregateInputType
  }

  export type GetStandorteAggregateType<T extends StandorteAggregateArgs> = {
        [P in keyof T & keyof AggregateStandorte]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStandorte[P]>
      : GetScalarType<T[P], AggregateStandorte[P]>
  }




  export type StandorteGroupByArgs = {
    where?: StandorteWhereInput
    orderBy?: Enumerable<StandorteOrderByWithAggregationInput>
    by: Array<StandorteScalarFieldEnum>
    having?: StandorteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StandorteCountAggregateInputType | true
    _avg?: StandorteAvgAggregateInputType
    _sum?: StandorteSumAggregateInputType
    _min?: StandorteMinAggregateInputType
    _max?: StandorteMaxAggregateInputType
  }


  export type StandorteGroupByOutputType = {
    standortID: number
    standortName: string
    _count: StandorteCountAggregateOutputType | null
    _avg: StandorteAvgAggregateOutputType | null
    _sum: StandorteSumAggregateOutputType | null
    _min: StandorteMinAggregateOutputType | null
    _max: StandorteMaxAggregateOutputType | null
  }

  type GetStandorteGroupByPayload<T extends StandorteGroupByArgs> = Promise<
    Array<
      PickArray<StandorteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StandorteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StandorteGroupByOutputType[P]>
            : GetScalarType<T[P], StandorteGroupByOutputType[P]>
        }
      >
    >


  export type StandorteSelect = {
    standortID?: boolean
    standortName?: boolean
    sitzungsZimmer?: boolean | SitzungszimmerFindManyArgs
    _count?: boolean | StandorteCountOutputTypeArgs
  }

  export type StandorteInclude = {
    sitzungsZimmer?: boolean | SitzungszimmerFindManyArgs
    _count?: boolean | StandorteCountOutputTypeArgs
  }

  export type StandorteGetPayload<
    S extends boolean | null | undefined | StandorteArgs,
    U = keyof S
      > = S extends true
        ? Standorte
    : S extends undefined
    ? never
    : S extends StandorteArgs | StandorteFindManyArgs
    ?'include' extends U
    ? Standorte  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'sitzungsZimmer'
        ? Array < SitzungszimmerGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? StandorteCountOutputTypeGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Standorte ?Standorte [P]
  : 
          P extends 'sitzungsZimmer'
        ? Array < SitzungszimmerGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? StandorteCountOutputTypeGetPayload<S['select'][P]> : never
  } 
    : Standorte
  : Standorte


  type StandorteCountArgs = Merge<
    Omit<StandorteFindManyArgs, 'select' | 'include'> & {
      select?: StandorteCountAggregateInputType | true
    }
  >

  export interface StandorteDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Standorte that matches the filter.
     * @param {StandorteFindUniqueArgs} args - Arguments to find a Standorte
     * @example
     * // Get one Standorte
     * const standorte = await prisma.standorte.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StandorteFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, StandorteFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Standorte'> extends True ? CheckSelect<T, Prisma__StandorteClient<Standorte>, Prisma__StandorteClient<StandorteGetPayload<T>>> : CheckSelect<T, Prisma__StandorteClient<Standorte | null >, Prisma__StandorteClient<StandorteGetPayload<T> | null >>

    /**
     * Find the first Standorte that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StandorteFindFirstArgs} args - Arguments to find a Standorte
     * @example
     * // Get one Standorte
     * const standorte = await prisma.standorte.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StandorteFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, StandorteFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Standorte'> extends True ? CheckSelect<T, Prisma__StandorteClient<Standorte>, Prisma__StandorteClient<StandorteGetPayload<T>>> : CheckSelect<T, Prisma__StandorteClient<Standorte | null >, Prisma__StandorteClient<StandorteGetPayload<T> | null >>

    /**
     * Find zero or more Standortes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StandorteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Standortes
     * const standortes = await prisma.standorte.findMany()
     * 
     * // Get first 10 Standortes
     * const standortes = await prisma.standorte.findMany({ take: 10 })
     * 
     * // Only select the `standortID`
     * const standorteWithStandortIDOnly = await prisma.standorte.findMany({ select: { standortID: true } })
     * 
    **/
    findMany<T extends StandorteFindManyArgs>(
      args?: SelectSubset<T, StandorteFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Standorte>>, PrismaPromise<Array<StandorteGetPayload<T>>>>

    /**
     * Create a Standorte.
     * @param {StandorteCreateArgs} args - Arguments to create a Standorte.
     * @example
     * // Create one Standorte
     * const Standorte = await prisma.standorte.create({
     *   data: {
     *     // ... data to create a Standorte
     *   }
     * })
     * 
    **/
    create<T extends StandorteCreateArgs>(
      args: SelectSubset<T, StandorteCreateArgs>
    ): CheckSelect<T, Prisma__StandorteClient<Standorte>, Prisma__StandorteClient<StandorteGetPayload<T>>>

    /**
     * Create many Standortes.
     *     @param {StandorteCreateManyArgs} args - Arguments to create many Standortes.
     *     @example
     *     // Create many Standortes
     *     const standorte = await prisma.standorte.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends StandorteCreateManyArgs>(
      args?: SelectSubset<T, StandorteCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Standorte.
     * @param {StandorteDeleteArgs} args - Arguments to delete one Standorte.
     * @example
     * // Delete one Standorte
     * const Standorte = await prisma.standorte.delete({
     *   where: {
     *     // ... filter to delete one Standorte
     *   }
     * })
     * 
    **/
    delete<T extends StandorteDeleteArgs>(
      args: SelectSubset<T, StandorteDeleteArgs>
    ): CheckSelect<T, Prisma__StandorteClient<Standorte>, Prisma__StandorteClient<StandorteGetPayload<T>>>

    /**
     * Update one Standorte.
     * @param {StandorteUpdateArgs} args - Arguments to update one Standorte.
     * @example
     * // Update one Standorte
     * const standorte = await prisma.standorte.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StandorteUpdateArgs>(
      args: SelectSubset<T, StandorteUpdateArgs>
    ): CheckSelect<T, Prisma__StandorteClient<Standorte>, Prisma__StandorteClient<StandorteGetPayload<T>>>

    /**
     * Delete zero or more Standortes.
     * @param {StandorteDeleteManyArgs} args - Arguments to filter Standortes to delete.
     * @example
     * // Delete a few Standortes
     * const { count } = await prisma.standorte.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StandorteDeleteManyArgs>(
      args?: SelectSubset<T, StandorteDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Standortes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StandorteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Standortes
     * const standorte = await prisma.standorte.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StandorteUpdateManyArgs>(
      args: SelectSubset<T, StandorteUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Standorte.
     * @param {StandorteUpsertArgs} args - Arguments to update or create a Standorte.
     * @example
     * // Update or create a Standorte
     * const standorte = await prisma.standorte.upsert({
     *   create: {
     *     // ... data to create a Standorte
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Standorte we want to update
     *   }
     * })
    **/
    upsert<T extends StandorteUpsertArgs>(
      args: SelectSubset<T, StandorteUpsertArgs>
    ): CheckSelect<T, Prisma__StandorteClient<Standorte>, Prisma__StandorteClient<StandorteGetPayload<T>>>

    /**
     * Count the number of Standortes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StandorteCountArgs} args - Arguments to filter Standortes to count.
     * @example
     * // Count the number of Standortes
     * const count = await prisma.standorte.count({
     *   where: {
     *     // ... the filter for the Standortes we want to count
     *   }
     * })
    **/
    count<T extends StandorteCountArgs>(
      args?: Subset<T, StandorteCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StandorteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Standorte.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StandorteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StandorteAggregateArgs>(args: Subset<T, StandorteAggregateArgs>): PrismaPromise<GetStandorteAggregateType<T>>

    /**
     * Group by Standorte.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StandorteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StandorteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StandorteGroupByArgs['orderBy'] }
        : { orderBy?: StandorteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StandorteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStandorteGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Standorte.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__StandorteClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    sitzungsZimmer<T extends SitzungszimmerFindManyArgs = {}>(args?: Subset<T, SitzungszimmerFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Sitzungszimmer>>, PrismaPromise<Array<SitzungszimmerGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Standorte findUnique
   */
  export type StandorteFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Standorte
     * 
    **/
    select?: StandorteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StandorteInclude | null
    /**
     * Throw an Error if a Standorte can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Standorte to fetch.
     * 
    **/
    where: StandorteWhereUniqueInput
  }


  /**
   * Standorte findFirst
   */
  export type StandorteFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Standorte
     * 
    **/
    select?: StandorteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StandorteInclude | null
    /**
     * Throw an Error if a Standorte can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Standorte to fetch.
     * 
    **/
    where?: StandorteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Standortes to fetch.
     * 
    **/
    orderBy?: Enumerable<StandorteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Standortes.
     * 
    **/
    cursor?: StandorteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Standortes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Standortes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Standortes.
     * 
    **/
    distinct?: Enumerable<StandorteScalarFieldEnum>
  }


  /**
   * Standorte findMany
   */
  export type StandorteFindManyArgs = {
    /**
     * Select specific fields to fetch from the Standorte
     * 
    **/
    select?: StandorteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StandorteInclude | null
    /**
     * Filter, which Standortes to fetch.
     * 
    **/
    where?: StandorteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Standortes to fetch.
     * 
    **/
    orderBy?: Enumerable<StandorteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Standortes.
     * 
    **/
    cursor?: StandorteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Standortes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Standortes.
     * 
    **/
    skip?: number
    distinct?: Enumerable<StandorteScalarFieldEnum>
  }


  /**
   * Standorte create
   */
  export type StandorteCreateArgs = {
    /**
     * Select specific fields to fetch from the Standorte
     * 
    **/
    select?: StandorteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StandorteInclude | null
    /**
     * The data needed to create a Standorte.
     * 
    **/
    data: XOR<StandorteCreateInput, StandorteUncheckedCreateInput>
  }


  /**
   * Standorte createMany
   */
  export type StandorteCreateManyArgs = {
    /**
     * The data used to create many Standortes.
     * 
    **/
    data: Enumerable<StandorteCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Standorte update
   */
  export type StandorteUpdateArgs = {
    /**
     * Select specific fields to fetch from the Standorte
     * 
    **/
    select?: StandorteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StandorteInclude | null
    /**
     * The data needed to update a Standorte.
     * 
    **/
    data: XOR<StandorteUpdateInput, StandorteUncheckedUpdateInput>
    /**
     * Choose, which Standorte to update.
     * 
    **/
    where: StandorteWhereUniqueInput
  }


  /**
   * Standorte updateMany
   */
  export type StandorteUpdateManyArgs = {
    /**
     * The data used to update Standortes.
     * 
    **/
    data: XOR<StandorteUpdateManyMutationInput, StandorteUncheckedUpdateManyInput>
    /**
     * Filter which Standortes to update
     * 
    **/
    where?: StandorteWhereInput
  }


  /**
   * Standorte upsert
   */
  export type StandorteUpsertArgs = {
    /**
     * Select specific fields to fetch from the Standorte
     * 
    **/
    select?: StandorteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StandorteInclude | null
    /**
     * The filter to search for the Standorte to update in case it exists.
     * 
    **/
    where: StandorteWhereUniqueInput
    /**
     * In case the Standorte found by the `where` argument doesn't exist, create a new Standorte with this data.
     * 
    **/
    create: XOR<StandorteCreateInput, StandorteUncheckedCreateInput>
    /**
     * In case the Standorte was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<StandorteUpdateInput, StandorteUncheckedUpdateInput>
  }


  /**
   * Standorte delete
   */
  export type StandorteDeleteArgs = {
    /**
     * Select specific fields to fetch from the Standorte
     * 
    **/
    select?: StandorteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StandorteInclude | null
    /**
     * Filter which Standorte to delete.
     * 
    **/
    where: StandorteWhereUniqueInput
  }


  /**
   * Standorte deleteMany
   */
  export type StandorteDeleteManyArgs = {
    /**
     * Filter which Standortes to delete
     * 
    **/
    where?: StandorteWhereInput
  }


  /**
   * Standorte without action
   */
  export type StandorteArgs = {
    /**
     * Select specific fields to fetch from the Standorte
     * 
    **/
    select?: StandorteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StandorteInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const UserScalarFieldEnum: {
    userID: 'userID',
    username: 'username',
    password: 'password'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const StockwerkeScalarFieldEnum: {
    stockwerkID: 'stockwerkID',
    stockwerkNr: 'stockwerkNr',
    stockwerkName: 'stockwerkName'
  };

  export type StockwerkeScalarFieldEnum = (typeof StockwerkeScalarFieldEnum)[keyof typeof StockwerkeScalarFieldEnum]


  export const SitzungszimmerScalarFieldEnum: {
    sitzungszimmerID: 'sitzungszimmerID',
    anzPersonen: 'anzPersonen',
    sitzungszimmerStID: 'sitzungszimmerStID'
  };

  export type SitzungszimmerScalarFieldEnum = (typeof SitzungszimmerScalarFieldEnum)[keyof typeof SitzungszimmerScalarFieldEnum]


  export const StandorteScalarFieldEnum: {
    standortID: 'standortID',
    standortName: 'standortName'
  };

  export type StandorteScalarFieldEnum = (typeof StandorteScalarFieldEnum)[keyof typeof StandorteScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    userID?: IntFilter | number
    username?: StringNullableFilter | string | null
    password?: StringNullableFilter | string | null
  }

  export type UserOrderByWithRelationInput = {
    userID?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type UserWhereUniqueInput = {
    userID?: number
  }

  export type UserOrderByWithAggregationInput = {
    userID?: SortOrder
    username?: SortOrder
    password?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    userID?: IntWithAggregatesFilter | number
    username?: StringNullableWithAggregatesFilter | string | null
    password?: StringNullableWithAggregatesFilter | string | null
  }

  export type StockwerkeWhereInput = {
    AND?: Enumerable<StockwerkeWhereInput>
    OR?: Enumerable<StockwerkeWhereInput>
    NOT?: Enumerable<StockwerkeWhereInput>
    stockwerkID?: IntFilter | number
    stockwerkNr?: IntNullableFilter | number | null
    stockwerkName?: StringNullableFilter | string | null
  }

  export type StockwerkeOrderByWithRelationInput = {
    stockwerkID?: SortOrder
    stockwerkNr?: SortOrder
    stockwerkName?: SortOrder
  }

  export type StockwerkeWhereUniqueInput = {
    stockwerkID?: number
  }

  export type StockwerkeOrderByWithAggregationInput = {
    stockwerkID?: SortOrder
    stockwerkNr?: SortOrder
    stockwerkName?: SortOrder
    _count?: StockwerkeCountOrderByAggregateInput
    _avg?: StockwerkeAvgOrderByAggregateInput
    _max?: StockwerkeMaxOrderByAggregateInput
    _min?: StockwerkeMinOrderByAggregateInput
    _sum?: StockwerkeSumOrderByAggregateInput
  }

  export type StockwerkeScalarWhereWithAggregatesInput = {
    AND?: Enumerable<StockwerkeScalarWhereWithAggregatesInput>
    OR?: Enumerable<StockwerkeScalarWhereWithAggregatesInput>
    NOT?: Enumerable<StockwerkeScalarWhereWithAggregatesInput>
    stockwerkID?: IntWithAggregatesFilter | number
    stockwerkNr?: IntNullableWithAggregatesFilter | number | null
    stockwerkName?: StringNullableWithAggregatesFilter | string | null
  }

  export type SitzungszimmerWhereInput = {
    AND?: Enumerable<SitzungszimmerWhereInput>
    OR?: Enumerable<SitzungszimmerWhereInput>
    NOT?: Enumerable<SitzungszimmerWhereInput>
    sitzungszimmerID?: IntFilter | number
    anzPersonen?: IntFilter | number
    sitzungsZimmerStandort?: XOR<StandorteRelationFilter, StandorteWhereInput>
    sitzungszimmerStID?: IntFilter | number
  }

  export type SitzungszimmerOrderByWithRelationInput = {
    sitzungszimmerID?: SortOrder
    anzPersonen?: SortOrder
    sitzungsZimmerStandort?: StandorteOrderByWithRelationInput
    sitzungszimmerStID?: SortOrder
  }

  export type SitzungszimmerWhereUniqueInput = {
    sitzungszimmerID?: number
    anzPersonen?: number
  }

  export type SitzungszimmerOrderByWithAggregationInput = {
    sitzungszimmerID?: SortOrder
    anzPersonen?: SortOrder
    sitzungszimmerStID?: SortOrder
    _count?: SitzungszimmerCountOrderByAggregateInput
    _avg?: SitzungszimmerAvgOrderByAggregateInput
    _max?: SitzungszimmerMaxOrderByAggregateInput
    _min?: SitzungszimmerMinOrderByAggregateInput
    _sum?: SitzungszimmerSumOrderByAggregateInput
  }

  export type SitzungszimmerScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SitzungszimmerScalarWhereWithAggregatesInput>
    OR?: Enumerable<SitzungszimmerScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SitzungszimmerScalarWhereWithAggregatesInput>
    sitzungszimmerID?: IntWithAggregatesFilter | number
    anzPersonen?: IntWithAggregatesFilter | number
    sitzungszimmerStID?: IntWithAggregatesFilter | number
  }

  export type StandorteWhereInput = {
    AND?: Enumerable<StandorteWhereInput>
    OR?: Enumerable<StandorteWhereInput>
    NOT?: Enumerable<StandorteWhereInput>
    standortID?: IntFilter | number
    standortName?: StringFilter | string
    sitzungsZimmer?: SitzungszimmerListRelationFilter
  }

  export type StandorteOrderByWithRelationInput = {
    standortID?: SortOrder
    standortName?: SortOrder
    sitzungsZimmer?: SitzungszimmerOrderByRelationAggregateInput
  }

  export type StandorteWhereUniqueInput = {
    standortID?: number
    standortName?: string
  }

  export type StandorteOrderByWithAggregationInput = {
    standortID?: SortOrder
    standortName?: SortOrder
    _count?: StandorteCountOrderByAggregateInput
    _avg?: StandorteAvgOrderByAggregateInput
    _max?: StandorteMaxOrderByAggregateInput
    _min?: StandorteMinOrderByAggregateInput
    _sum?: StandorteSumOrderByAggregateInput
  }

  export type StandorteScalarWhereWithAggregatesInput = {
    AND?: Enumerable<StandorteScalarWhereWithAggregatesInput>
    OR?: Enumerable<StandorteScalarWhereWithAggregatesInput>
    NOT?: Enumerable<StandorteScalarWhereWithAggregatesInput>
    standortID?: IntWithAggregatesFilter | number
    standortName?: StringWithAggregatesFilter | string
  }

  export type UserCreateInput = {
    username?: string | null
    password?: string | null
  }

  export type UserUncheckedCreateInput = {
    userID?: number
    username?: string | null
    password?: string | null
  }

  export type UserUpdateInput = {
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateInput = {
    userID?: IntFieldUpdateOperationsInput | number
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserCreateManyInput = {
    userID?: number
    username?: string | null
    password?: string | null
  }

  export type UserUpdateManyMutationInput = {
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    userID?: IntFieldUpdateOperationsInput | number
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StockwerkeCreateInput = {
    stockwerkNr?: number | null
    stockwerkName?: string | null
  }

  export type StockwerkeUncheckedCreateInput = {
    stockwerkID?: number
    stockwerkNr?: number | null
    stockwerkName?: string | null
  }

  export type StockwerkeUpdateInput = {
    stockwerkNr?: NullableIntFieldUpdateOperationsInput | number | null
    stockwerkName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StockwerkeUncheckedUpdateInput = {
    stockwerkID?: IntFieldUpdateOperationsInput | number
    stockwerkNr?: NullableIntFieldUpdateOperationsInput | number | null
    stockwerkName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StockwerkeCreateManyInput = {
    stockwerkID?: number
    stockwerkNr?: number | null
    stockwerkName?: string | null
  }

  export type StockwerkeUpdateManyMutationInput = {
    stockwerkNr?: NullableIntFieldUpdateOperationsInput | number | null
    stockwerkName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StockwerkeUncheckedUpdateManyInput = {
    stockwerkID?: IntFieldUpdateOperationsInput | number
    stockwerkNr?: NullableIntFieldUpdateOperationsInput | number | null
    stockwerkName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SitzungszimmerCreateInput = {
    anzPersonen: number
    sitzungsZimmerStandort: StandorteCreateNestedOneWithoutSitzungsZimmerInput
  }

  export type SitzungszimmerUncheckedCreateInput = {
    sitzungszimmerID?: number
    anzPersonen: number
    sitzungszimmerStID: number
  }

  export type SitzungszimmerUpdateInput = {
    anzPersonen?: IntFieldUpdateOperationsInput | number
    sitzungsZimmerStandort?: StandorteUpdateOneRequiredWithoutSitzungsZimmerInput
  }

  export type SitzungszimmerUncheckedUpdateInput = {
    sitzungszimmerID?: IntFieldUpdateOperationsInput | number
    anzPersonen?: IntFieldUpdateOperationsInput | number
    sitzungszimmerStID?: IntFieldUpdateOperationsInput | number
  }

  export type SitzungszimmerCreateManyInput = {
    sitzungszimmerID?: number
    anzPersonen: number
    sitzungszimmerStID: number
  }

  export type SitzungszimmerUpdateManyMutationInput = {
    anzPersonen?: IntFieldUpdateOperationsInput | number
  }

  export type SitzungszimmerUncheckedUpdateManyInput = {
    sitzungszimmerID?: IntFieldUpdateOperationsInput | number
    anzPersonen?: IntFieldUpdateOperationsInput | number
    sitzungszimmerStID?: IntFieldUpdateOperationsInput | number
  }

  export type StandorteCreateInput = {
    standortName: string
    sitzungsZimmer?: SitzungszimmerCreateNestedManyWithoutSitzungsZimmerStandortInput
  }

  export type StandorteUncheckedCreateInput = {
    standortID?: number
    standortName: string
    sitzungsZimmer?: SitzungszimmerUncheckedCreateNestedManyWithoutSitzungsZimmerStandortInput
  }

  export type StandorteUpdateInput = {
    standortName?: StringFieldUpdateOperationsInput | string
    sitzungsZimmer?: SitzungszimmerUpdateManyWithoutSitzungsZimmerStandortInput
  }

  export type StandorteUncheckedUpdateInput = {
    standortID?: IntFieldUpdateOperationsInput | number
    standortName?: StringFieldUpdateOperationsInput | string
    sitzungsZimmer?: SitzungszimmerUncheckedUpdateManyWithoutSitzungsZimmerStandortInput
  }

  export type StandorteCreateManyInput = {
    standortID?: number
    standortName: string
  }

  export type StandorteUpdateManyMutationInput = {
    standortName?: StringFieldUpdateOperationsInput | string
  }

  export type StandorteUncheckedUpdateManyInput = {
    standortID?: IntFieldUpdateOperationsInput | number
    standortName?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type UserCountOrderByAggregateInput = {
    userID?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    userID?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    userID?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    userID?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    userID?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type StockwerkeCountOrderByAggregateInput = {
    stockwerkID?: SortOrder
    stockwerkNr?: SortOrder
    stockwerkName?: SortOrder
  }

  export type StockwerkeAvgOrderByAggregateInput = {
    stockwerkID?: SortOrder
    stockwerkNr?: SortOrder
  }

  export type StockwerkeMaxOrderByAggregateInput = {
    stockwerkID?: SortOrder
    stockwerkNr?: SortOrder
    stockwerkName?: SortOrder
  }

  export type StockwerkeMinOrderByAggregateInput = {
    stockwerkID?: SortOrder
    stockwerkNr?: SortOrder
    stockwerkName?: SortOrder
  }

  export type StockwerkeSumOrderByAggregateInput = {
    stockwerkID?: SortOrder
    stockwerkNr?: SortOrder
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type StandorteRelationFilter = {
    is?: StandorteWhereInput
    isNot?: StandorteWhereInput
  }

  export type SitzungszimmerCountOrderByAggregateInput = {
    sitzungszimmerID?: SortOrder
    anzPersonen?: SortOrder
    sitzungszimmerStID?: SortOrder
  }

  export type SitzungszimmerAvgOrderByAggregateInput = {
    sitzungszimmerID?: SortOrder
    anzPersonen?: SortOrder
    sitzungszimmerStID?: SortOrder
  }

  export type SitzungszimmerMaxOrderByAggregateInput = {
    sitzungszimmerID?: SortOrder
    anzPersonen?: SortOrder
    sitzungszimmerStID?: SortOrder
  }

  export type SitzungszimmerMinOrderByAggregateInput = {
    sitzungszimmerID?: SortOrder
    anzPersonen?: SortOrder
    sitzungszimmerStID?: SortOrder
  }

  export type SitzungszimmerSumOrderByAggregateInput = {
    sitzungszimmerID?: SortOrder
    anzPersonen?: SortOrder
    sitzungszimmerStID?: SortOrder
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type SitzungszimmerListRelationFilter = {
    every?: SitzungszimmerWhereInput
    some?: SitzungszimmerWhereInput
    none?: SitzungszimmerWhereInput
  }

  export type SitzungszimmerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StandorteCountOrderByAggregateInput = {
    standortID?: SortOrder
    standortName?: SortOrder
  }

  export type StandorteAvgOrderByAggregateInput = {
    standortID?: SortOrder
  }

  export type StandorteMaxOrderByAggregateInput = {
    standortID?: SortOrder
    standortName?: SortOrder
  }

  export type StandorteMinOrderByAggregateInput = {
    standortID?: SortOrder
    standortName?: SortOrder
  }

  export type StandorteSumOrderByAggregateInput = {
    standortID?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StandorteCreateNestedOneWithoutSitzungsZimmerInput = {
    create?: XOR<StandorteCreateWithoutSitzungsZimmerInput, StandorteUncheckedCreateWithoutSitzungsZimmerInput>
    connectOrCreate?: StandorteCreateOrConnectWithoutSitzungsZimmerInput
    connect?: StandorteWhereUniqueInput
  }

  export type StandorteUpdateOneRequiredWithoutSitzungsZimmerInput = {
    create?: XOR<StandorteCreateWithoutSitzungsZimmerInput, StandorteUncheckedCreateWithoutSitzungsZimmerInput>
    connectOrCreate?: StandorteCreateOrConnectWithoutSitzungsZimmerInput
    upsert?: StandorteUpsertWithoutSitzungsZimmerInput
    connect?: StandorteWhereUniqueInput
    update?: XOR<StandorteUpdateWithoutSitzungsZimmerInput, StandorteUncheckedUpdateWithoutSitzungsZimmerInput>
  }

  export type SitzungszimmerCreateNestedManyWithoutSitzungsZimmerStandortInput = {
    create?: XOR<Enumerable<SitzungszimmerCreateWithoutSitzungsZimmerStandortInput>, Enumerable<SitzungszimmerUncheckedCreateWithoutSitzungsZimmerStandortInput>>
    connectOrCreate?: Enumerable<SitzungszimmerCreateOrConnectWithoutSitzungsZimmerStandortInput>
    createMany?: SitzungszimmerCreateManySitzungsZimmerStandortInputEnvelope
    connect?: Enumerable<SitzungszimmerWhereUniqueInput>
  }

  export type SitzungszimmerUncheckedCreateNestedManyWithoutSitzungsZimmerStandortInput = {
    create?: XOR<Enumerable<SitzungszimmerCreateWithoutSitzungsZimmerStandortInput>, Enumerable<SitzungszimmerUncheckedCreateWithoutSitzungsZimmerStandortInput>>
    connectOrCreate?: Enumerable<SitzungszimmerCreateOrConnectWithoutSitzungsZimmerStandortInput>
    createMany?: SitzungszimmerCreateManySitzungsZimmerStandortInputEnvelope
    connect?: Enumerable<SitzungszimmerWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type SitzungszimmerUpdateManyWithoutSitzungsZimmerStandortInput = {
    create?: XOR<Enumerable<SitzungszimmerCreateWithoutSitzungsZimmerStandortInput>, Enumerable<SitzungszimmerUncheckedCreateWithoutSitzungsZimmerStandortInput>>
    connectOrCreate?: Enumerable<SitzungszimmerCreateOrConnectWithoutSitzungsZimmerStandortInput>
    upsert?: Enumerable<SitzungszimmerUpsertWithWhereUniqueWithoutSitzungsZimmerStandortInput>
    createMany?: SitzungszimmerCreateManySitzungsZimmerStandortInputEnvelope
    set?: Enumerable<SitzungszimmerWhereUniqueInput>
    disconnect?: Enumerable<SitzungszimmerWhereUniqueInput>
    delete?: Enumerable<SitzungszimmerWhereUniqueInput>
    connect?: Enumerable<SitzungszimmerWhereUniqueInput>
    update?: Enumerable<SitzungszimmerUpdateWithWhereUniqueWithoutSitzungsZimmerStandortInput>
    updateMany?: Enumerable<SitzungszimmerUpdateManyWithWhereWithoutSitzungsZimmerStandortInput>
    deleteMany?: Enumerable<SitzungszimmerScalarWhereInput>
  }

  export type SitzungszimmerUncheckedUpdateManyWithoutSitzungsZimmerStandortInput = {
    create?: XOR<Enumerable<SitzungszimmerCreateWithoutSitzungsZimmerStandortInput>, Enumerable<SitzungszimmerUncheckedCreateWithoutSitzungsZimmerStandortInput>>
    connectOrCreate?: Enumerable<SitzungszimmerCreateOrConnectWithoutSitzungsZimmerStandortInput>
    upsert?: Enumerable<SitzungszimmerUpsertWithWhereUniqueWithoutSitzungsZimmerStandortInput>
    createMany?: SitzungszimmerCreateManySitzungsZimmerStandortInputEnvelope
    set?: Enumerable<SitzungszimmerWhereUniqueInput>
    disconnect?: Enumerable<SitzungszimmerWhereUniqueInput>
    delete?: Enumerable<SitzungszimmerWhereUniqueInput>
    connect?: Enumerable<SitzungszimmerWhereUniqueInput>
    update?: Enumerable<SitzungszimmerUpdateWithWhereUniqueWithoutSitzungsZimmerStandortInput>
    updateMany?: Enumerable<SitzungszimmerUpdateManyWithWhereWithoutSitzungsZimmerStandortInput>
    deleteMany?: Enumerable<SitzungszimmerScalarWhereInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StandorteCreateWithoutSitzungsZimmerInput = {
    standortName: string
  }

  export type StandorteUncheckedCreateWithoutSitzungsZimmerInput = {
    standortID?: number
    standortName: string
  }

  export type StandorteCreateOrConnectWithoutSitzungsZimmerInput = {
    where: StandorteWhereUniqueInput
    create: XOR<StandorteCreateWithoutSitzungsZimmerInput, StandorteUncheckedCreateWithoutSitzungsZimmerInput>
  }

  export type StandorteUpsertWithoutSitzungsZimmerInput = {
    update: XOR<StandorteUpdateWithoutSitzungsZimmerInput, StandorteUncheckedUpdateWithoutSitzungsZimmerInput>
    create: XOR<StandorteCreateWithoutSitzungsZimmerInput, StandorteUncheckedCreateWithoutSitzungsZimmerInput>
  }

  export type StandorteUpdateWithoutSitzungsZimmerInput = {
    standortName?: StringFieldUpdateOperationsInput | string
  }

  export type StandorteUncheckedUpdateWithoutSitzungsZimmerInput = {
    standortID?: IntFieldUpdateOperationsInput | number
    standortName?: StringFieldUpdateOperationsInput | string
  }

  export type SitzungszimmerCreateWithoutSitzungsZimmerStandortInput = {
    anzPersonen: number
  }

  export type SitzungszimmerUncheckedCreateWithoutSitzungsZimmerStandortInput = {
    sitzungszimmerID?: number
    anzPersonen: number
  }

  export type SitzungszimmerCreateOrConnectWithoutSitzungsZimmerStandortInput = {
    where: SitzungszimmerWhereUniqueInput
    create: XOR<SitzungszimmerCreateWithoutSitzungsZimmerStandortInput, SitzungszimmerUncheckedCreateWithoutSitzungsZimmerStandortInput>
  }

  export type SitzungszimmerCreateManySitzungsZimmerStandortInputEnvelope = {
    data: Enumerable<SitzungszimmerCreateManySitzungsZimmerStandortInput>
    skipDuplicates?: boolean
  }

  export type SitzungszimmerUpsertWithWhereUniqueWithoutSitzungsZimmerStandortInput = {
    where: SitzungszimmerWhereUniqueInput
    update: XOR<SitzungszimmerUpdateWithoutSitzungsZimmerStandortInput, SitzungszimmerUncheckedUpdateWithoutSitzungsZimmerStandortInput>
    create: XOR<SitzungszimmerCreateWithoutSitzungsZimmerStandortInput, SitzungszimmerUncheckedCreateWithoutSitzungsZimmerStandortInput>
  }

  export type SitzungszimmerUpdateWithWhereUniqueWithoutSitzungsZimmerStandortInput = {
    where: SitzungszimmerWhereUniqueInput
    data: XOR<SitzungszimmerUpdateWithoutSitzungsZimmerStandortInput, SitzungszimmerUncheckedUpdateWithoutSitzungsZimmerStandortInput>
  }

  export type SitzungszimmerUpdateManyWithWhereWithoutSitzungsZimmerStandortInput = {
    where: SitzungszimmerScalarWhereInput
    data: XOR<SitzungszimmerUpdateManyMutationInput, SitzungszimmerUncheckedUpdateManyWithoutSitzungsZimmerInput>
  }

  export type SitzungszimmerScalarWhereInput = {
    AND?: Enumerable<SitzungszimmerScalarWhereInput>
    OR?: Enumerable<SitzungszimmerScalarWhereInput>
    NOT?: Enumerable<SitzungszimmerScalarWhereInput>
    sitzungszimmerID?: IntFilter | number
    anzPersonen?: IntFilter | number
    sitzungszimmerStID?: IntFilter | number
  }

  export type SitzungszimmerCreateManySitzungsZimmerStandortInput = {
    sitzungszimmerID?: number
    anzPersonen: number
  }

  export type SitzungszimmerUpdateWithoutSitzungsZimmerStandortInput = {
    anzPersonen?: IntFieldUpdateOperationsInput | number
  }

  export type SitzungszimmerUncheckedUpdateWithoutSitzungsZimmerStandortInput = {
    sitzungszimmerID?: IntFieldUpdateOperationsInput | number
    anzPersonen?: IntFieldUpdateOperationsInput | number
  }

  export type SitzungszimmerUncheckedUpdateManyWithoutSitzungsZimmerInput = {
    sitzungszimmerID?: IntFieldUpdateOperationsInput | number
    anzPersonen?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}